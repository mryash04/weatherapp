{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","Date","toLocaleDateString","Fragment","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","apidata","json","releatedinfodata","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateinfo","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mLAIMA,EACC,mCADDA,EAEE,0CA+DOC,EA5DH,WAAM,IAAD,EAEUC,mBAAS,IAFnB,mBAETC,EAFS,KAEFC,EAFE,OAGcF,mBAAS,IAHvB,mBAGTG,EAHS,KAGAC,EAHA,MAgBF,IAAIC,MAAOC,qBAgBxB,OACE,cAAC,IAAMC,SAAP,UACE,qBAAKC,UAAmC,oBAAhBL,EAAQM,MAAyBN,EAAQM,KAAKC,KAAO,GAAM,OAAiB,OAApG,SACE,iCACA,qBAAKF,UAAU,YAAf,SACE,uBAAOG,KAAK,OAAOC,YAAY,aAAaJ,UAAU,aACtDK,SAAU,SAAAC,GAAC,OAAIZ,EAASY,EAAEC,OAAOC,QACjCA,MAAOf,EACPgB,WAnCO,SAACC,GACC,UAAZA,EAAIC,KACLC,MAAM,GAAD,OAAItB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IAAWuB,MAAK,SAACC,GACzE,OAAOA,EAAQC,UACdF,MAAK,SAACG,GACPpB,EAAWoB,GACXtB,EAAS,YA+BgB,oBAAhBC,EAAQM,KACf,gCACI,sBAAKD,UAAU,gBAAf,UACI,+BAAKL,EAAQsB,KAAb,KAAqBtB,EAAQuB,IAAIC,WACjC,mBAAGnB,UAAU,gBAAb,SA5BD,SAACoB,GACd,IAKIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,aAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EAPS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OACtE,SAAU,YAAa,UAAW,WAAY,YAM3BL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,aAAkBE,EAAlB,aAA2BE,EAA3B,aAAqCE,GAiBOE,CAAS,IAAIhC,WAE/C,sBAAKG,UAAU,eAAf,UACI,qBAAIA,UAAU,qBAAd,UAAoC8B,KAAKC,MAAMpC,EAAQM,KAAKC,MAA5D,WACA,mBAAGF,UAAU,eAAb,SAA6BL,EAAQA,QAAQ,GAAGM,aAGrD,WClDE+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.a804a673.chunk.js","sourcesContent":["import React from 'react';\nimport \"./index.css\";\nimport {useState} from 'react';\n\nconst api={\n  key: \"c50ce91fa3b698c9c1a76e31326ef3f5\",\n  base: \"http://api.openweathermap.org/data/2.5/\"\n}\n\nconst App = () =>{\n\n  const[query, setQuery] = useState(\"\");\n  const[weather, setWeather] = useState(\"\");\n\n  const search = (evt) =>{\n    if(evt.key === \"Enter\"){\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`).then((apidata) =>{\n        return apidata.json();\n      }).then((releatedinfodata) =>{\n        setWeather(releatedinfodata);\n        setQuery(\"\");\n      });\n    };\n  };\n\n  const date = new Date().toLocaleDateString();\n\n  let dateinfo = (d) =>{\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \n    \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Sataurday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day}, ${date}, ${month}, ${year}`;  \n  }\n\n  return(\n    <React.Fragment>\n      <div className={(typeof weather.main != \"undefined\") ? ((weather.main.temp > 16) ? 'warm': 'cold'): 'cold'}>\n        <main>\n        <div className=\"input-box\">\n          <input type=\"text\" placeholder=\"search....\" className=\"search-bar\"\n          onChange={e => setQuery(e.target.value)} \n          value={query}\n          onKeyPress={search}/>\n        </div>\n        {(typeof weather.main != \"undefined\") ? (\n          <div>\n              <div className=\"location-info\">\n                  <h2>{weather.name}, {weather.sys.country}</h2>\n                  <p className=\"date-datainfo\">{dateinfo(new Date())}</p>\n              </div>\n              <div className=\"weather-info\">\n                  <h2 className=\"weather-temprature\">{Math.round(weather.main.temp)}Â°c</h2>\n                  <p className=\"weather-type\">{weather.weather[0].main}</p>\n              </div>\n          </div>\n        ) : (\"\")}\n        </main>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}